pipeline {
    agent any

    environment {
        APP_NAME = "java-app"
        AWS_REGION = "us-east-1"
        AWS_ACCOUNT_ID = "214046906664"  
        ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APP_NAME}"
        IMAGE_TAG = "${GIT_COMMIT}"
        SONAR_SCANNER_HOME = tool 'SonarScanner' // Ensure this matches Jenkins tool name
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Java App') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir('spring-boot-app') {
                        sh '''
                        /opt/sonar-scanner/bin/sonar-scanner \
                          -Dsonar.projectKey=java-app \
                          -Dsonar.sources=. \
                          -Dsonar.java.binaries=target \
                          -Dsonar.host.url=http://98.84.138.229:9000 \
                          -Dsonar.login=squ_4fb5dce9ffb5040ec9114690f8b95e2bd9e2a1a0
                        '''
                    }
                }
            }
        }

        stage('Wait for Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('spring-boot-app') {
                    sh 'docker build -t ${APP_NAME}:${IMAGE_TAG} .'
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                dir('spring-boot-app') {
                    sh """
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                    docker tag ${APP_NAME}:${IMAGE_TAG} $ECR_REPO:${IMAGE_TAG}
                    docker push $ECR_REPO:${IMAGE_TAG}
                    """
                }
            }
        }
    }
}
